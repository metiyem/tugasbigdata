from sklearn.model_selection import train_test_split, KFold
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import roc_curve, auc, confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, classification_report
import matplotlib.pyplot as plt
import pandas as pd

def plot_training_distribution(y_train):
    train_counts = y_train.value_counts()
    fig, ax = plt.subplots()
    train_counts.plot(kind='bar', ax=ax, color='b', alpha=0.7)
    ax.set_xlabel('Label')
    ax.set_ylabel('Jumlah')
    ax.set_title('Distribusi Data Training')
    plt.xticks(rotation=45)
    plt.show()

classifier = DecisionTreeClassifier(random_state=42)
classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)
y_prob = classifier.predict_proba(x_test)[:, 1]

kf = KFold(n_splits=7)
x_array = x_tfidf.toarray()

def cross_val(estimator, X, y, kf):
    acc = []
    pcs = []
    rec = []
    f1s = []

    for train_index, test_index in kf.split(X, y):
        x_train, x_test = X[train_index], X[test_index]
        y_train, y_test = y[train_index], y[test_index]
        
        model = estimator.fit(x_train, y_train)
        y_pred = model.predict(x_test)
        
        acc.append(accuracy_score(y_test, y_pred))
        pcs.append(precision_score(y_test, y_pred, average='macro', zero_division=0))
        rec.append(recall_score(y_test, y_pred, average='macro', zero_division=0))
        f1s.append(f1_score(y_test, y_pred, average='macro', zero_division=0))
        
        print(classification_report(y_test, y_pred, zero_division=0))
        print(f'Confusion matrix:\n{confusion_matrix(y_test, y_pred)}')
        print('======================================================\n')
    
    avg_acc = np.mean(acc)
    avg_pcs = np.mean(pcs)
    avg_rec = np.mean(rec)
    avg_f1s = np.mean(f1s)
    
    print(f'Average accuracy = {avg_acc}')
    print(f'Average precision = {avg_pcs}')
    print(f'Average recall = {avg_rec}')
    print(f'Average F1-score = {avg_f1s}')
    
    return avg_acc, avg_pcs, avg_rec, avg_f1s

cross_val(classifier, x_array, data_clean['label'], kf)

fpr, tpr, thresholds = roc_curve(y_test, y_prob, pos_label='Positive')
roc_auc = auc(fpr, tpr)

plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=2, label='Kurva ROC (luas = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Karakteristik Penerima Operasional')
plt.legend(loc="lower right")
plt.show()

conf_matrix = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)

print("Confusion Matrix:\n", conf_matrix)
print("Accuracy: ", accuracy)
if accuracy > 0.7:
    plot_training_distribution(y_train)
